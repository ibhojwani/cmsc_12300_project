'''
Code used to make plots for presentation. This .py file was converted
from a Jupyter Notebook.
'''
# coding: utf-8

# In[16]:


point = [[0.13718378110777057, 0.09336118436501054, 0.03937682605871193, 0.04572792703592352, 0.13083268013055896, 0.031120394788336843, 0.00444577068404812, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012702201954423187, 0.004445770684048136, 0.0012702201954423187, 0.0006351100977211623, 0.0, 0.0, 0.003810660586326956, 0.059700349185789515, 0.06605145016300057, 0.005080880781769275, 0.001905330293163478, 0.0012702201954423187, 0.0006351100977211593, 0.001905330293163478], [0.8555573609679411, 2.442785338835197, 4.030013316702453, 5.617241294569709, 7.204469272436965, 8.791697250304221, 10.378925228171477, 11.966153206038733, 13.553381183905989, 15.140609161773245,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       16.727837139640503, 18.315065117507757, 19.902293095375015, 21.489521073242273, 23.076749051109527, 24.66397702897678, 26.25120500684404, 27.838432984711297, 29.42566096257855, 31.012888940445805, 32.60011691831306, 34.18734489618032, 35.77457287404757, 37.36180085191483, 38.94902882978209, 40.536256807649345, 42.1234847855166, 43.71071276338385, 45.29794074125111, 46.88516871911837, 48.47239669698562, 50.05962467485288, 51.646852652720135, 53.23408063058739, 54.82130860845465, 56.4085365863219, 57.99576456418916, 59.58299254205642, 61.17022051992367, 62.757448497790925, 64.34467647565818, 65.93190445352543, 67.51913243139269, 69.10636040925995, 70.69358838712719, 72.28081636499445, 73.86804434286171, 75.45527232072897, 77.04250029859622, 78.62972827646348, 80.21695625433074]]

# In[2]:


import matplotlib.pyplot as plt
plt.plot(point[0])


# In[18]:


point2 = [[0.07211315514226369, 0.05987967346634395, 0.004507072196391479, 0.0, 0.004507072196391484, 0.003863204739764124, 0.003219337283136774, 0.001931602369882062, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06889381785912695, 0.06374287820610812, 0.0, 0.0038632047397641287, 0.08949757647120232, 0.08241503444830066, 0.05666033618320722, 0.041207517224150704, 0.028974035548230963, 0.0341249752012498, 0.019316023698820645], [0.22681247553168984, 1.7924522757001602, 3.3580920758686306, 4.923731876037102, 6.489371676205572, 8.055011476374041, 9.620651276542512, 11.186291076710981, 12.751930876879452, 14.317570677047923, 15.883210477216393,



# In[20]:


plt.plot(point2[0])


# In[24]:


point3 = [[0.07280125400554775, 0.032686277308613274, 0.0019809865035523198, 0.00148573987766424, 0.0009904932517761599, 0.00297147975532848, 0.0019809865035523198, 0.0004952466258880799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02080035828729934, 0.08122044664564533, 0.0, 0.027733811049732552, 0.08914439265985401, 0.06537255461722673, 0.0341720171862776, 0.03417201718627737, 0.023276591416739816], [0.24166194980111316, 2.2771417762842585, 4.312621602767404, 6.3481014292505495, 8.383581255733695, 10.41906108221684, 12.454540908699986, 14.490020735183132,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               16.525500561666277, 18.560980388149424, 20.596460214632568, 22.631940041115712, 24.66741986759886, 26.702899694082006, 28.73837952056515, 30.773859347048294, 32.80933917353144, 34.84481900001459, 36.880298826497736, 38.915778652980876, 40.95125847946402, 42.98673830594717, 45.02221813243031, 47.05769795891346, 49.093177785396605, 51.12865761187975, 53.1641374383629, 55.19961726484604, 57.23509709132919, 59.270576917812335, 61.306056744295475, 63.34153657077862, 65.37701639726177, 67.41249622374491, 69.44797605022806, 71.4834558767112, 73.51893570319436, 75.5544155296775, 77.58989535616064, 79.6253751826438, 81.66085500912693]]


# In[25]:


plt.plot(point3[0])


# In[26]:


point[1]


# In[27]:


point4 = [0.10410328215219199, 0.0040824816530271365, 0.0015309306198851764, 0.001530930619885177, 0.004592791859655529, 0.0025515510331419605, 0.0005103102066283921, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04235574715015647, 0.06276815541529233, 0.0, 0.049500090042954296, 0.08267025347379937, 0.059706294175521764, 0.03265985322421727, 0.03419078384410221, 0.02347426950490599]


# In[28]:


plt.plot(point4)


# In[30]:


point5 = [[0.1256394904777773, 0.024920229516253344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1318695478568409, 0.13394623364986202, 0.07891406013480187, 0.011421771861616144], [0.3496708048683906, 2.323181034249557, 4.2966912636307235, 6.270201493011889, 8.243711722393057, 10.217221951774222, 12.190732181155388, 14.164242410536556, 16.13775263991772, 18.11126286929889, 20.084773098680056, 22.058283328061222,
                                                                                                                                                                                                                                                                                                                     24.031793557442388, 26.005303786823553, 27.978814016204723, 29.95232424558589, 31.925834474967054, 33.899344704348216, 35.872854933729386, 37.84636516311055, 39.81987539249172, 41.79338562187288, 43.76689585125405, 45.74040608063522, 47.71391631001638, 49.68742653939755, 51.66093676877871, 53.63444699815988, 55.60795722754105, 57.58146745692221, 59.55497768630338, 61.52848791568454, 63.50199814506571, 65.47550837444689, 67.44901860382805, 69.42252883320921, 71.39603906259039, 73.36954929197155, 75.34305952135271, 77.31656975073389, 79.29007998011505]]


# In[34]:


from scipy.interpolate import UnivariateSpline
import numpy as np
spl = UnivariateSpline(x=np.array(point5[1]), y=np.array(point5[0]), k=5)


# In[38]:


[0] + [1, 2]


# In[10]:


sizes = [1, 2, 3, 4, 5, 6, 7, 15]
time = [5.4, 14.69, 24, 34.45, 42.9, 54.32, 62.1, (60)*2 + 18.69]
import pandas as pd
df = pd.DataFrame()
df['size'] = sizes
df['time'] = time
print(df)
df.plot('size', legend=False)
plt.ylabel("Real time (seconds)")
plt.xlabel("Data size (thousands of cases)")
plt.ylim((0, 145))
plt.title("Algorithm I Running Time")
plt.savefig("Alg1Runtime.png")


# In[11]:


sizes = [1, 2, 3, 4, 5, 6, 7, 11, 15]
time = [5.837, 9.347, 12.842, 16.978, 18.577, 23.888, 24.736, 34.675, 51.783]
import pandas as pd
df = pd.DataFrame()
df['size'] = sizes
df['time'] = time
print(df)
df.plot('size', legend=False)
plt.ylabel("Real time (seconds)")
plt.xlabel("Data size (thousands of cases)")
plt.ylim((0, 145))
plt.title("Algorithm II Running Time (Random Walk Only)")
plt.savefig("Alg2RuntimeRandWalk.png")


# In[13]:


import numpy as np
matrix_to_heatmap = np.array([[0,  3,  0,  0,  3,  1,  3,  0,  1,  2,  2,  2,  1,  8,  6,  4,  4,  1, ],
                              [3,  0, 14,  1,  7,  4,  3,  5,  5,  2,
                                  4,  1,  4,  1,  3,  5,  0,  2, ],
                              [0, 14,  0,  4,  9,  6,  5,  8,  5,  2,
                                  3,  7,  5,  0,  1,  6,  4,  7, ],
                              [0,  1,  4,  0, 11,  3, 19,  4,  0,  8,
                                  11, 20, 13,  1,  5,  8,  3, 11, ],
                              [3,  7,  9, 11,  0,  2, 15, 10,  4, 30,
                                  27, 11, 12,  1,  7, 37,  3,  5, ],
                              [1,  4,  6,  3,  2,  0,  5,  2,  1,  2,
                                  3,  3,  3,  1,  1,  4,  4,  1, ],
                              [3,  3,  5, 19, 15,  5,  0,  7,  2, 15,
                                  12,  9, 15,  4,  7, 15,  3, 11, ],
                              [0,  5,  8,  4, 10,  2,  7,  0,  1,  5,
                                  15, 12, 10,  1,  2,  6,  2,  6, ],
                              [1,  5,  5,  0,  4,  1,  2,  1,  0,  1,
                                  1,  3,  3,  0,  2,  1,  0,  0, ],
                              [2,  2,  2,  8, 30,  2, 15,  5,  1,  0,
                                  11,  5, 10,  0,  4, 24,  2,  1, ],
                              [2,  4,  3, 11, 27,  3, 12, 15,  1, 11,
                                  0, 10, 20,  1, 10, 44,  2,  4, ],
                              [2,  1,  7, 20, 11,  3,  9, 12,  3,  5,
                                  10,  0, 30,  1, 19, 11,  4, 14, ],
                              [1,  4,  5, 13, 12,  3, 15, 10,  3, 10,
                                  20, 30,  0,  1, 18, 31,  6,  8, ],
                              [8,  1,  0,  1,  1,  1,  4,  1,  0,  0,
                                  1,  1,  1,  0,  4,  0,  3,  1, ],
                              [6,  3,  1,  5,  7,  1,  7,  2,  2,  4,
                                  10, 19, 18,  4,  0,  7,  4, 23, ],
                              [4,  5,  6,  8, 37,  4, 15,  6,  1, 24,
                                  44, 11, 31,  0,  7,  0,  4,  5, ],
                              [4,  0,  4,  3,  3,  4,  3,  2,  0,  2,
                                  2,  4,  6,  3,  4,  4,  0,  2, ],
                              [1,  2,  7, 11,  5,  1, 11,  6,  0,  1,  4, 14,  8,  1, 23,  5,  2,  0, ]])


# In[28]:


fig, ax = plt.subplots()
ax.set_xlabel("Astro Object Index")
ax.set_ylabel("Astro Object Index")
ax.set_title("Algorithm II: Random Walk Clusters (Single Box)")
plt.imshow(matrix_to_heatmap, cmap='hot', interpolation='nearest')
plt.show()
fig.savefig("Alg2HeatMap.png")


# The algorithm will compute in
#
# if number of cases < N * P, then 0
# else
# $$\left(\sum_{i=1} ^{N - N \times P} (N \times P) + i \right) \frac{size - (N \times P)}{ N \times P}  + (N \times P)$$
#
# left side is linear increase once past N x P, right side is the first time when we pass N x P
# the ratio is the number of times we exceed N x p

# In[26]:


(6000 - (250))/(250)


# In[30]:


comp = 0
for i in range(251):
    comp += (250 + i)

comp * (6000 - (250))/(250)


# In[32]:


comp = 0
for i in range(251):
    comp += (250 + i)

comp * (2000 - (250))/(250)
